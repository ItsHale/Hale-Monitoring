// <auto-generated />
using System;
using Hale.Core.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hale.Core.Data.Migrations
{
    [DbContext(typeof(HaleDBContext))]
    [Migration("20180730003902_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Identifier")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasFilter("[Identifier] IS NOT NULL");

                    b.ToTable("AgentConfigs");

                    b.HasData(
                        new { Id = 1, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 2, 39, 1, 343, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)), Identifier = "seed_config01" }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetCheckAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Module");

                    b.Property<string>("Target");

                    b.HasKey("Id");

                    b.ToTable("AgentConfigSetCheckActions");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentConfigSetId");

                    b.Property<int?>("CriticalActionId");

                    b.Property<float>("CriticalThreshold");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Function");

                    b.Property<TimeSpan>("Interval");

                    b.Property<int>("ModuleId");

                    b.Property<bool>("Startup");

                    b.Property<byte>("Type");

                    b.Property<int?>("WarningActionId");

                    b.Property<float>("WarningThreshold");

                    b.HasKey("Id");

                    b.HasIndex("AgentConfigSetId");

                    b.HasIndex("CriticalActionId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WarningActionId");

                    b.ToTable("AgentConfigSetFuncSettings");

                    b.HasData(
                        new { Id = 1, AgentConfigSetId = 0, CriticalThreshold = 1f, Enabled = true, Function = "default", Interval = new TimeSpan(0, 0, 10, 0, 0), ModuleId = 1, Startup = true, Type = (byte)1, WarningThreshold = 0.5f }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetFunctionSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgentConfigSetFunctionId");

                    b.Property<string>("Key");

                    b.Property<string>("Target");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AgentConfigSetFunctionId");

                    b.ToTable("AgentConfigSetFunctionSettings");

                    b.HasData(
                        new { Id = 1, AgentConfigSetFunctionId = 0, Key = "foo", Target = "default", Value = "bar" }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgentConfigSetId");

                    b.Property<bool>("Enabled");

                    b.Property<TimeSpan>("Interval");

                    b.Property<string>("Name");

                    b.Property<bool>("Startup");

                    b.HasKey("Id");

                    b.HasIndex("AgentConfigSetId");

                    b.ToTable("AgentConfigSetTasks");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.CheckRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<int?>("ResultId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("CheckRecords");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Identifier");

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.InfoRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<int?>("ResultId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("InfoRecords");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier");

                    b.Property<int>("Major");

                    b.Property<int>("Minor");

                    b.Property<int>("Revision");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new { Id = 1, Identifier = "com.itshale.core.memory", Major = 1, Minor = 0, Revision = 0 }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AboveCritical");

                    b.Property<bool>("AboveWarning");

                    b.Property<string>("Exception");

                    b.Property<DateTimeOffset>("ExecutionTime");

                    b.Property<int>("FunctionId");

                    b.Property<int>("HostId");

                    b.Property<string>("Message");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Target");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Nodes.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked");

                    b.Property<bool>("Configured");

                    b.Property<int?>("ConfiguredBy");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("Domain");

                    b.Property<string>("FriendlyName");

                    b.Property<Guid>("Guid");

                    b.Property<string>("HardwareSummary");

                    b.Property<string>("HostName");

                    b.Property<string>("Ip");

                    b.Property<DateTimeOffset?>("LastConnected");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("NicSummary");

                    b.Property<string>("OperatingSystem");

                    b.Property<byte[]>("RsaKey");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Nodes");

                    b.HasData(
                        new { Id = 1, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost01", Guid = new Guid("057449e7-e7f1-47b6-80a7-b21ed8dea058"), HostName = "test-host-01", Ip = "127.0.0.1", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 1 },
                        new { Id = 2, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost02", Guid = new Guid("faf16de0-b8e4-4a0f-8c1b-eb410725c6da"), HostName = "test-host-02", Ip = "10.1.2.2", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 0 },
                        new { Id = 3, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost03", Guid = new Guid("844fa1ab-3b54-45bf-ab5c-9bedfcd6afa9"), HostName = "test-host-03", Ip = "10.1.2.3", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 0 },
                        new { Id = 4, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost04", Guid = new Guid("057449e7-e7f1-47b6-80a7-b21ed8dea051"), HostName = "test-host-04", Ip = "10.1.2.4", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 1 },
                        new { Id = 5, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost05", Guid = new Guid("faf16de0-b8e4-4a0f-8c1b-eb410725c6d2"), HostName = "test-host-05", Ip = "10.1.2.5", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 0 },
                        new { Id = 6, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost06", Guid = new Guid("844fa1ab-3b54-45bf-ab5c-9bedfcd6afa3"), HostName = "test-host-06", Ip = "10.1.2.6", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 0 },
                        new { Id = 7, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost07", Guid = new Guid("057449e7-e7f1-47b6-80a7-b21ed8dea044"), HostName = "test-host-01", Ip = "10.1.2.7", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 1 },
                        new { Id = 8, Blocked = false, Configured = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost08", Guid = new Guid("faf16de0-b8e4-4a0f-8c1b-eb410725c6d5"), HostName = "test-host-01", Ip = "10.1.2.8", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Status = 0 },
                        new { Id = 9, Blocked = false, Configured = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost09", Guid = new Guid("844fa1ab-3b54-45bf-ab5c-9bedfcd6afa6"), HostName = "test-host-01", Ip = "10.1.2.9", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OperatingSystem = "Microsoft Windows NT 10.0.14393.0", Status = 0 },
                        new { Id = 10, Blocked = false, Configured = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost10", Guid = new Guid("057449e7-e7f1-47b6-80a7-b21ed8dea05b"), HostName = "test-host-01", Ip = "10.1.2.10", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OperatingSystem = "Microsoft Windows NT 10.0.14393.0", Status = 1 },
                        new { Id = 11, Blocked = false, Configured = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost11", Guid = new Guid("faf16de0-b8e4-4a0f-8c1b-eb410725c6dd"), HostName = "test-host-01", Ip = "10.1.2.11", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OperatingSystem = "Microsoft Windows NT 10.0.14393.0", Status = 0 },
                        new { Id = 12, Blocked = false, Configured = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost12", Guid = new Guid("844fa1ab-3b54-45bf-ab5c-9bedfcd6afbb"), HostName = "test-host-01", Ip = "10.1.2.12", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OperatingSystem = "Microsoft Windows NT 10.0.14393.0", Status = 0 },
                        new { Id = 13, Blocked = false, Configured = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), Domain = "domain.com", FriendlyName = "TestHost13", Guid = new Guid("844fa1ab-3b54-45bf-ab5c-9bedfcd6afcc"), HostName = "test-host-01", Ip = "10.1.2.13", Modified = new DateTimeOffset(new DateTime(2018, 7, 30, 0, 39, 1, 342, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)), OperatingSystem = "Microsoft Windows NT 10.0.14393.0", Status = 0 }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Nodes.NodeComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NodeId");

                    b.Property<string>("Text");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("UserId");

                    b.ToTable("NodeComments");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Nodes.NodeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HostId");

                    b.Property<string>("Key");

                    b.Property<int?>("NodeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeDetails");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Users.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<bool>("Enabled");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsAdmin");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("OldPassword");

                    b.Property<string>("Password");

                    b.Property<DateTimeOffset?>("PasswordChanged");

                    b.Property<string>("UserName")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Accounts");

                    b.HasData(
                        new { Id = 1, Activated = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 2, 39, 1, 219, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)), Email = "simon.aronsson@outlook.com", Enabled = true, FullName = "Test User 01", IsAdmin = true, Password = "$2a$05$xNzyg0FGbqN8QEA2ZhESaeiMYZBZmAHR9kiK8UK6ItAtIfptiFQxG", UserName = "test01" },
                        new { Id = 2, Activated = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 2, 39, 1, 331, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)), Email = "nils@piksel.se", Enabled = true, FullName = "Test User 02", IsAdmin = false, Password = "$2a$05$03cdsu77QqL9/kz8e5PNluIfbc/s.GV6JSdodJDKfArcT0m5zT1sC", UserName = "test02" },
                        new { Id = 3, Activated = false, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 2, 39, 1, 334, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)), Email = "foo@bar.com", Enabled = true, FullName = "Test User 03", IsAdmin = false, Password = "$2a$05$MD6eCdGZbxWY3cvn2Dwt7eemt/COO/HQ0xGj0628UigUUuNsWYTVy", UserName = "test03" },
                        new { Id = 4, Activated = true, Created = new DateTimeOffset(new DateTime(2018, 7, 30, 2, 39, 1, 337, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)), Email = "foobar@acmegroup.com", Enabled = false, FullName = "Test User 04", IsAdmin = false, Password = "$2a$05$TWzK83kI0Q/iXXM4WuaCz.GTSaMJbmsR3lT.slUfsgTwkO5YPh7hK", UserName = "test04" }
                    );
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Users.AccountDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Key");

                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetFunction", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Agent.AgentConfigSet", "AgentConfigSet")
                        .WithMany("Functions")
                        .HasForeignKey("AgentConfigSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hale.Core.Data.Entities.Agent.AgentConfigSetCheckAction", "CriticalAction")
                        .WithMany()
                        .HasForeignKey("CriticalActionId");

                    b.HasOne("Hale.Core.Data.Entities.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hale.Core.Data.Entities.Agent.AgentConfigSetCheckAction", "WarningAction")
                        .WithMany()
                        .HasForeignKey("WarningActionId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetFunctionSettings", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Agent.AgentConfigSetFunction", "AgentConfigSetFunction")
                        .WithMany("FunctionSettings")
                        .HasForeignKey("AgentConfigSetFunctionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Agent.AgentConfigSetTask", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Agent.AgentConfigSet")
                        .WithMany("Tasks")
                        .HasForeignKey("AgentConfigSetId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.CheckRecord", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Modules.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.Function", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Modules.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Modules.InfoRecord", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Modules.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Nodes.NodeComment", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Nodes.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId");

                    b.HasOne("Hale.Core.Data.Entities.Users.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Nodes.NodeDetail", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Nodes.Node")
                        .WithMany("NodeDetails")
                        .HasForeignKey("NodeId");
                });

            modelBuilder.Entity("Hale.Core.Data.Entities.Users.AccountDetail", b =>
                {
                    b.HasOne("Hale.Core.Data.Entities.Users.Account")
                        .WithMany("AccountDetails")
                        .HasForeignKey("AccountId");
                });
#pragma warning restore 612, 618
        }
    }
}
